{"ast":null,"code":"import _regeneratorRuntime from \"/home/shimaa/reactnd-project-myreads-starter/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/shimaa/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/shimaa/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shimaa/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shimaa/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shimaa/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shimaa/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/shimaa/reactnd-project-myreads-starter/src/App.js\";\nimport React from 'react';\nimport * as BooksAPI from './BooksAPI';\nimport './App.css';\nimport BookShelf from \"./BookShelf\";\nimport Search from './Search.js';\n\nvar BooksApp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BooksApp, _React$Component);\n\n  function BooksApp() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BooksApp);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BooksApp)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.shelfs = [{\n      key: 'currentlyReading',\n      name: 'Currently Read'\n    }, {\n      key: 'wantToRead',\n      name: 'Want To Read'\n    }, {\n      key: 'read',\n      name: 'Read'\n    }];\n    _this.state = {\n      /**\n      * TODO: Instead of using this state variable to keep track of which page\n      * we're on, use the URL in the browser's address bar. This will ensure that\n      * users can use the browser's back and forward buttons to navigate between\n      * pages, as well as provide a good URL they can bookmark and share.\n      */\n      books: [],\n      showSearchPage: false\n    };\n\n    _this.shelfChanged = function (book, newShelf) {\n      console.log(\"haha\");\n      BooksAPI.update(book, newShelf);\n      book.shelf = newShelf;\n\n      var books = _this.state.books.filter(function (b) {\n        return b.id !== book.id;\n      }).concat(book);\n\n      _this.setState({\n        books: books\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(BooksApp, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var books;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return BooksAPI.getAll();\n\n              case 2:\n                books = _context.sent;\n                this.setState({\n                  books: books\n                });\n                console.log(books);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log(this.shelfs[0].key);\n      return React.createElement(\"div\", {\n        className: \"app\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, this.state.showSearchPage ? React.createElement(Search, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        className: \"list-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"list-books-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"MyReads\")), React.createElement(\"div\", {\n        className: \"list-books-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, this.shelfs.map(function (shelf) {\n        return React.createElement(BookShelf, {\n          key1: shelf.key,\n          name: shelf.name,\n          books: _this2.state.books,\n          onChangeShelf: _this2.shelfChanged,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        });\n      })), React.createElement(\"div\", {\n        className: \"open-search\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.setState({\n            showSearchPage: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Add a book\")))));\n    }\n  }]);\n\n  return BooksApp;\n}(React.Component);\n\nexport default BooksApp;","map":{"version":3,"sources":["/home/shimaa/reactnd-project-myreads-starter/src/App.js"],"names":["React","BooksAPI","BookShelf","Search","BooksApp","shelfs","key","name","state","books","showSearchPage","shelfChanged","book","newShelf","console","log","update","shelf","filter","b","id","concat","setState","getAll","map","Component"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACC,OAAO,KAAKC,QAAZ,MAA0B,YAA1B;AACD,OAAO,WAAP;AACA,OAAOC,SAAP,MAAqB,aAArB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;IACMC,Q;;;;;;;;;;;;;;;;;UACJC,M,GAAQ,CAAC;AAACC,MAAAA,GAAG,EAAE,kBAAN;AAAyBC,MAAAA,IAAI,EAAC;AAA9B,KAAD,EACN;AAACD,MAAAA,GAAG,EAAC,YAAL;AAAkBC,MAAAA,IAAI,EAAC;AAAvB,KADM,EAEN;AAACD,MAAAA,GAAG,EAAC,MAAL;AAAYC,MAAAA,IAAI,EAAC;AAAjB,KAFM,C;UAGRC,K,GAAQ;AAEH;;;;;;AAMHC,MAAAA,KAAK,EAAE,EARD;AASNC,MAAAA,cAAc,EAAE;AATV,K;;UAmBRC,Y,GAAc,UAACC,IAAD,EAAMC,QAAN,EAAiB;AAC7BC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAd,MAAAA,QAAQ,CAACe,MAAT,CAAgBJ,IAAhB,EAAqBC,QAArB;AACAD,MAAAA,IAAI,CAACK,KAAL,GAAaJ,QAAb;;AACA,UAAMJ,KAAK,GAAG,MAAKD,KAAL,CAAWC,KAAX,CAAiBS,MAAjB,CAAwB,UAACC,CAAD;AAAA,eAAKA,CAAC,CAACC,EAAF,KAAOR,IAAI,CAACQ,EAAjB;AAAA,OAAxB,EAA6CC,MAA7C,CAAoDT,IAApD,CAAd;;AACA,YAAKU,QAAL,CAAc;AAACb,QAAAA,KAAK,EAALA;AAAD,OAAd;AACD,K;;;;;;;;;;;;;;;;;uBAZqBR,QAAQ,CAACsB,MAAT,E;;;AAAdd,gBAAAA,K;AACN,qBAAKa,QAAL,CAAc;AAACb,kBAAAA,KAAK,EAALA;AAAD,iBAAd;AACAK,gBAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;;;;;;;;;;;;;;;;6BAaO;AAAA;;AACPK,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,MAAL,CAAY,CAAZ,EAAeC,GAA3B;AACA,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKE,KAAL,CAAWE,cAAX,GACA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,GAGC;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CADF,EAKE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,KAAKL,MAAL,CAAYmB,GAAZ,CAAgB,UAACP,KAAD;AAAA,eACf,oBAAC,SAAD;AAAW,UAAA,IAAI,EAAEA,KAAK,CAACX,GAAvB;AAA4B,UAAA,IAAI,EAAGW,KAAK,CAACV,IAAzC;AAA+C,UAAA,KAAK,EAAG,MAAI,CAACC,KAAL,CAAWC,KAAlE;AAAyE,UAAA,aAAa,EAAE,MAAI,CAACE,YAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADe;AAAA,OAAhB,CADF,CADF,EAQA;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACW,QAAL,CAAc;AAAEZ,YAAAA,cAAc,EAAE;AAAlB,WAAd,CAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CARA,CALF,CAJJ,CADF;AA0BD;;;;EA5DoBV,KAAK,CAACyB,S;;AA+D7B,eAAerB,QAAf","sourcesContent":["import React from 'react'\n import * as BooksAPI from './BooksAPI'\nimport './App.css'\nimport BookShelf from\"./BookShelf\"\nimport Search from './Search.js'\nclass BooksApp extends React.Component {\n  shelfs =[{key: 'currentlyReading',name:'Currently Read'},\n    {key:'wantToRead',name:'Want To Read'},\n    {key:'read',name:'Read'}]\n  state = {\n   \n       /**\n     * TODO: Instead of using this state variable to keep track of which page\n     * we're on, use the URL in the browser's address bar. This will ensure that\n     * users can use the browser's back and forward buttons to navigate between\n     * pages, as well as provide a good URL they can bookmark and share.\n     */\n    books: [],\n    showSearchPage: false\n  };\n \n  async componentDidMount(){\n    const books = await BooksAPI.getAll();\n    this.setState({books});\n    console.log(books);\n  };\n  \n  \n  shelfChanged =(book,newShelf)=>{\n    console.log(\"haha\")\n    BooksAPI.update(book,newShelf);\n    book.shelf = newShelf;\n    const books = this.state.books.filter((b)=>b.id!==book.id).concat(book);\n    this.setState({books})\n  }\n  \n\n  render() {\n    console.log(this.shelfs[0].key)\n    return (\n      <div className=\"app\">\n        {this.state.showSearchPage ? (\n         <Search/>\n        ) : (\n          <div className=\"list-books\">\n            <div className=\"list-books-title\">\n              <h1>MyReads</h1>\n            </div>\n\n            <div className=\"list-books-content\">\n              <div>\n               {this.shelfs.map((shelf)=>(\n                 <BookShelf key1={shelf.key} name ={shelf.name} books ={this.state.books} onChangeShelf={this.shelfChanged} />\n               ))}\n               \n              \n            </div>\n            <div className=\"open-search\">\n              <button onClick={() => this.setState({ showSearchPage: true })}>Add a book</button>\n            </div>\n          </div>\n              </div>\n    )\n               }</div>)\n    \n  }}\n\n\nexport default BooksApp;\n"]},"metadata":{},"sourceType":"module"}